//
//  Copyright (C) 09-05-2013 Jasper den Ouden.(ojasper.nl)
//
//  This is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published
//  by the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//

$quality=500; //Needs to be so damn high :/

mt = 6; //Thickness of plate to hang on to.

sw = 27; //Screw distance.
sd = 6.5/2;
sr = 1.2;
sh = 3;
shr = 3;

t=2;  //Side thickness.
ft=6; //Front thickness. (must accommodate screws)

w=36; //Width of stepper.
l=40 ; //Length of stepper.


rf=12; //Front space for gear.

inf = 2*(w+l);

module _body()
{   
    translate([0,0,w+t]) //corner triangles ontop
        linear_extrude(height=t) for( s= [1,-1] ) 
        scale([s,1]) polygon([[w/2,-l/2],[w/2-2*t,-l/2],[w/2,-l/2+2*t]]);

    difference()
    {   linear_extrude(height=w+2*t) difference()
        {   union()
            {   square([w+2*t,l+2*ft], r=max(t,ft), center=true);
                translate([0,l/2-2*t]) scale([1/2,5*t/w]) circle(w);//Springy bit extension.
            }
            square([3*w/4,3*l/4],center=true); //Main center hole.
            translate([0,l/2-2*t]) scale([1/2-t/w,4*t/w]) circle(w); //Springy bit space.
        }
        translate([0,0,w/2+t]) cube([w,l,w],center=true);
        translate([0,0,w+t]) cube([w,l,2*w],center=true);
        translate([0,0,w/2+t]) rotate([90,0]) cylinder(r=rf, h=3*l);
        translate([-w,l/2,w+2*t]) rotate([0,90]) scale([1,(l-2*t)/w]) cylinder(r=w,h=3*l);

        for( a = [0,90,180,270] ) //Screw space.
            translate([0,-l/2-ft-inf,w/2+t])
                rotate([-90,0]) rotate(a) translate([sw,sw]/2) union()
            {   cylinder(r=sr,h=inf+w/2);
                translate([0,0,inf+sd]) cylinder(r=shr, h=w);
            }
    }
}

module springy_back()
{   union()
    {
        difference()
        {   translate([-t,l/2,w/2+t]) rotate([0,90]) linear_extrude(height=2*t) difference()
            {   union()
                {   scale([1,1/2]) circle(w/2);
                    translate([t,0]) square([w/2+t,w/4]);
                }
                scale([1,1/2]) difference()
                {   circle(w/2-2*t);
                    translate([-3*w/2+3*t,-t]) square([w,w]);
                }
                translate([0,-t-w]) square(2*w, center=true);
            }
            //Springy bit space.
            translate([0,l/2-2*t]) scale([1/2-t/w,4*t/w,1]) cylinder(r=w,h=4*t);
        }
        translate([0,l/2-t/2,0])
        {   rotate([90,0]) linear_extrude(height=t)
            {   for(x=[-1,1]*t) translate([x,0]) scale([4*t/(w+t),1]) circle(w+t);
                translate([-t,0]) square([2*t,w+t]);
            }
            translate([0,-t]) linear_extrude(height=t) difference()
            {   circle(5*t);
                translate([0,10*t]) square(20*[t,t],center=true);
            }
        }
        translate([0,l/2,w+3*t/4]) cube([2*t,t,t/2], center=true, r=t/4);
        translate([0,l/2-t,t/2]) cube([2*t,t,t], center=true);
    }
}
//Not used currently.
module springy_front()
{
    translate([w/2+1.5*t,-l/2-ft-2*t]) linear_extrude(height=3*t) difference()
    {   union()
        {   circle(3*t);
            translate([-4*t,t]) square([4*t,2*t],center=true,r=t);
        }
        circle(2*t);
        translate([-inf,t]) square([inf,0.6*mt]);
    }
}

module thing()
{
    difference()
    {   union()
        {   _body();
            springy_back();
//            springy_front();
        }
        translate([0,0,-inf]) cube(inf*[2,2,2], center=true);
    }
}

thing();
