//
//  Copyright (C) 09-05-2013 Jasper den Ouden.(ojasper.nl)
//
//  This is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published
//  by the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.//
//  Copyright (C) 08-05-2013 Jasper den Ouden.(ojasper.nl)
//
//  This is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published
//  by the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.
//

//

// Parameters for better speed: teeth_p=false, logo_p=false.($quality of course)

$quality = 256.0;

pt  = 20; //..thickness of plank.
gl = 20; //Length it grabs plank.

t = 10; //Thicknesses.
w=2*t;

sw = t; //Wedge hole size.

r=t/2;

dz = pt; //TODO not robust against this one at least.
dx = 1.5;

hll = 20; //Handle lip length.

teeth_p= true;
logo_p = true;

rbw = 8; //Rubber band width.(over)
rbt = 2; //... thickness.(over)

//For convenience.
l = gl + t; h= pt + t;

module main_profile()
{   
    difference()
    {   union()
        {   square(size=[l,h], r=r, center=true);
            translate([l/2,h/2 + dz/2]) square([2*t,dz+t], r=r, center=true);
            translate([l/2,h/2+dz/2]) union()
            {   difference()
                {   circle(dz);
                    difference()
                    {   circle(dz-t/4);
                        translate([0,-dz]) square([dz,t],center=true);
                    }
                    square(2*dz);
                }
                translate([dz/2,0]) difference()
                {   intersection()
                    {   circle(dz/2);
                        square(2*dz);
                    }
                    circle(dz/2-t/4);
                }
            }
            translate([l/2+t+dx, h/2+dx]) square([t/2, dz-dx],r=r/2);
            translate([l/2+t+dx+hll/sqrt(8)+t/4, h/2+dz-dx-t/2+hll/sqrt(8)]) 
                rotate(45) square([hll, t/2],center=true, r=r/2);
        }
        translate([-2*t,0]) 
            square([gl+4*t,pt], center=true);
        translate([0,h/2 + dz]) square([l+t,2*dz], r=r, center=true);
    }   
}

module teeth(w,h, s,sh) //TODO linear_extrude?
{
    for( x = [s : 4*s : w-s] )
        for( y = [s : 2*s : h-s] )
            translate([-x,y]) cylinder(r1=s,r2=0, h=sh);
    for( x = [3*s : 4*s : w-s] )
        for( y = [2*s : 2*s : h-s] )
            translate([-x,y]) cylinder(r1=s,r2=0, h=sh);
}

include<openhw.escad>;

module hanger()
{
    union()
    {   difference()
        {   linear_extrude(w) union()
            {   main_profile();
                if( rbw>0 )translate([l/2-t/4,h/2]) circle(t/4);
            }
            if( sw>0 ) translate([l/2-sw-t/2,0,w/2])
                           cube([sw,4*(l+w),sw],center=true);
        
            if( rbw>0 )
            {   for( z= [0 : 2*rbw : w/2] ) translate([l/2,h/2]) union()
                    {
                        translate([0,0,w/2+z]) union()
                        {   cube([rbt,2*t,rbw],center=true);
                            translate([0,dz+t/2])
                                cube([2*t,2*rbt,rbw],center=true);                            
                        }
                        translate([0,0,w/2-z]) union()
                        {   cube([rbt,2*t,rbw],center=true);
                            translate([0,dz+t/2])
                                cube([2*t,2*rbt,rbw],center=true);
                        }
                    }
            }
        }
        if( teeth_p ) union()
            {   translate([l/2+t-0.1*dx,h/2,0]) //Near plank side
                    rotate([0,90]) teeth(w, dz-0*sqrt(8)*t, t/5,0.4*dx);
                translate([l/2+t+0.9*dx, h/2+t/2,w]) //Moving side
                           rotate([0,-90]) teeth(w, dz-dx-t/2, t/5,0.4*dx);
            }
        if( logo_p )
            translate([l/2-t/2,-h/2+5*t/6,w/2]) rotate([0,90]) linear_extrude(height=9*t/16) 
                scale([1,-1]) oshw_logo_2d(t);
    }
}

hanger();
